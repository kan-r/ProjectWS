service: cas360-ws-api

provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, 'ap-southeast-2'}
  stage: ${opt:stage, 'dev'}
  stackName: cas360-ws-api-${self:provider.stage}
  apiName: cas360-rest-api-${self:provider.stage}
  websocketsApiName: cas360-ws-api-${self:provider.stage}
  endpointType: regional
  lambdaHashingVersion: "20201221"
  logRetentionInDays: 1
  logs:
    websocket:
      level: INFO

  environment:
    WS_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
    WS_CONNECTIONS_TABLE: cas360-WSConnections-${self:provider.stage}

  deploymentBucket:
    # name: deployment.bglcorp.com.au
    name: deployment.kan-r.com

  iam:
    role:
      # permissionBoundary: arn:aws:iam::741610524140:policy/SecOps-Boundary
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            Fn::GetAtt:
              - cas360WSConnectionsTable
              - Arn
        # - Effect: Allow
        #   Action:
        #     - apigateway:POST
            # - apigateway:GET
          # Resource: arn:aws:apigateway:${self:provider.region}::/restapis/*
        # - Effect: Allow
        #   Action:
        #     - apigateway:*
        #   Resource: arn:aws:apigateway:${self:provider.region}::/restapis/a{AWS::AccountId}/*

functions:
  connect:
    handler: handler.connect
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource: 
              - 'route.request.querystring.clientName'
              # - 'route.request.header.auth'
  disconnect:
    handler: handler.disconnect
    events:
      - websocket:
          route: $disconnect
  default:
    handler: handler.default
    events:
      - websocket:
          route: $default
  notify:
    handler: handler.notify
    events:
      - http:
          path: notifications/{Id}
          method: POST
          cors: true
  auth:
    handler: handler.authorize

resources:
  Resources:
    cas360WSConnectionsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.WS_CONNECTIONS_TABLE}
          AttributeDefinitions:
            - AttributeName: connectionId
              AttributeType: S
          KeySchema:
            - AttributeName: connectionId
              KeyType: HASH
          SSESpecification:
            SSEEnabled: true
          TimeToLiveSpecification:
            AttributeName: ttl
            Enabled: true
          BillingMode: PAY_PER_REQUEST
# extensions:
#   IamRoleCustomResourcesLambdaExecution:
#     Properties:
#       PermissionsBoundary: arn:aws:iam::741610524140:policy/SecOps-Boundary
          